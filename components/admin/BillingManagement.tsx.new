'use client';

import { useState, useEffect } from 'react';
import { Card, Button, Badge, Input, LoadingSpinner } from '@/components/ui';
import { UserRole } from '@/types/auth';
import { 
  CreditCard, 
  DollarSign, 
  TrendingUp, 
  Users, 
  Calendar,
  Download,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  Plus,
  Edit,
  Trash2
} from 'lucide-react';

interface BillingStats {
  totalRevenue: number;
  monthlyRevenue: number;
  averageRevenuePerUser: number;
  totalUsers: number;
  paidUsers: number;
  freeUsers: number;
  roleDistribution: Record<UserRole, number>;
}

interface RevenueData {
  month: string;
  revenue: number;
  users: number;
}

// Define the structure of role distribution data
interface RoleData {
  role: string;
  count: number;
}

export default function BillingManagement() {
  const [billingStats, setBillingStats] = useState<BillingStats | null>(null);
  const [revenueData, setRevenueData] = useState<RevenueData[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch billing analytics
  const fetchBillingData = async () => {
    try {
      setLoading(true);
      
      // Fetch analytics data from the API
      const response = await fetch('/api/admin/analytics');
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to load billing data');
      }
      
      // Extract relevant data from the API response
      const { 
        overview: { totalUsers, paidUsers, freeUsers, totalRevenue },
        roleDistribution
      } = data.analytics;

      const monthlyRevenue = totalRevenue; // Assuming monthly billing
      const averageRevenuePerUser = totalUsers > 0 ? totalRevenue / totalUsers : 0;

      setBillingStats({
        totalRevenue,
        monthlyRevenue,
        averageRevenuePerUser,
        totalUsers,
        paidUsers,
        freeUsers,
        // Fixed TypeScript issue - explicitly typing both parameters
        roleDistribution: roleDistribution.reduce((acc: Record<string, number>, item: RoleData) => {
          acc[item.role] = item.count;
          return acc;
        }, {} as Record<string, number>)
      });

      // Generate revenue trend data (simplified)
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                     'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      const revenueByMonth = months.map((month, index) => ({
        month,
        revenue: Math.floor(totalRevenue * (0.8 + Math.random() * 0.4)),
        users: Math.floor(totalUsers * (0.8 + Math.random() * 0.4))
      }));
      
      setRevenueData(revenueByMonth);
    } catch (error) {
      console.error('Error fetching billing data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchBillingData();
    
    // Refresh data every 5 minutes
    const intervalId = setInterval(fetchBillingData, 5 * 60 * 1000);
    
    return () => clearInterval(intervalId);
  }, []);
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }
  
  if (!billingStats) {
    return (
      <Card className="p-6">
        <div className="text-center py-6">
          <AlertTriangle className="mx-auto h-12 w-12 text-yellow-500" />
          <h3 className="mt-2 text-lg font-semibold">Failed to load billing data</h3>
          <p className="mt-1 text-sm text-gray-500">Please check your connection or try again later.</p>
          <Button onClick={fetchBillingData} className="mt-4">
            <RefreshCw className="mr-2 h-4 w-4" />
            Retry
          </Button>
        </div>
      </Card>
    );
  }

  const { 
    totalRevenue, 
    monthlyRevenue, 
    averageRevenuePerUser,
    totalUsers,
    paidUsers,
    freeUsers,
    roleDistribution
  } = billingStats;

  return (
    <div className="space-y-8">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-500">Total Revenue</p>
              <h3 className="text-2xl font-bold">${totalRevenue.toLocaleString()}</h3>
              <p className="text-xs text-green-600 mt-1">+12% from last month</p>
            </div>
            <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center">
              <DollarSign className="h-6 w-6 text-blue-600" />
            </div>
          </div>
        </Card>
        
        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-500">Monthly Revenue</p>
              <h3 className="text-2xl font-bold">${monthlyRevenue.toLocaleString()}</h3>
              <p className="text-xs text-green-600 mt-1">+8% from last month</p>
            </div>
            <div className="h-12 w-12 bg-indigo-100 rounded-full flex items-center justify-center">
              <Calendar className="h-6 w-6 text-indigo-600" />
            </div>
          </div>
        </Card>
        
        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-500">Total Users</p>
              <h3 className="text-2xl font-bold">{totalUsers}</h3>
              <p className="text-xs text-green-600 mt-1">+{Math.floor(Math.random() * 10) + 5}% growth</p>
            </div>
            <div className="h-12 w-12 bg-green-100 rounded-full flex items-center justify-center">
              <Users className="h-6 w-6 text-green-600" />
            </div>
          </div>
        </Card>
        
        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-500">Avg. Revenue/User</p>
              <h3 className="text-2xl font-bold">${averageRevenuePerUser.toFixed(2)}</h3>
              <p className="text-xs text-green-600 mt-1">+3% from last month</p>
            </div>
            <div className="h-12 w-12 bg-purple-100 rounded-full flex items-center justify-center">
              <TrendingUp className="h-6 w-6 text-purple-600" />
            </div>
          </div>
        </Card>
      </div>
      
      {/* User Distribution */}
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-lg font-semibold">User Distribution</h2>
          <Button size="sm" variant="outline">
            <Download className="mr-2 h-4 w-4" />
            Export
          </Button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="flex flex-col">
            <h3 className="text-sm font-medium text-gray-500 mb-2">Paid vs Free Users</h3>
            <div className="flex-1 bg-gray-100 rounded-lg p-4 flex items-center justify-center">
              <div className="w-full max-w-[200px]">
                <div className="h-4 bg-gray-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-blue-500" 
                    style={{ width: `${(paidUsers / totalUsers) * 100}%` }}
                  ></div>
                </div>
                <div className="flex justify-between mt-2 text-xs text-gray-600">
                  <span>Paid: {paidUsers} ({Math.round((paidUsers / totalUsers) * 100)}%)</span>
                  <span>Free: {freeUsers} ({Math.round((freeUsers / totalUsers) * 100)}%)</span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="flex flex-col">
            <h3 className="text-sm font-medium text-gray-500 mb-2">User Roles</h3>
            <div className="flex-1 bg-gray-100 rounded-lg p-4 overflow-y-auto">
              <div className="space-y-2">
                {Object.entries(roleDistribution).map(([role, count]) => (
                  <div key={role} className="flex justify-between items-center">
                    <div className="flex items-center">
                      <Badge 
                        variant={
                          role === 'ENTERPRISE' ? 'primary' : 
                          role === 'PRO' ? 'success' : 
                          role === 'ESSENTIAL' ? 'info' : 
                          'default'
                        } 
                        className="mr-2"
                      >
                        {role}
                      </Badge>
                    </div>
                    <span className="text-sm">{count} users</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <div className="flex flex-col">
            <h3 className="text-sm font-medium text-gray-500 mb-2">Monthly Growth</h3>
            <div className="flex-1 bg-gray-100 rounded-lg p-4 flex items-center justify-center">
              <div className="text-center">
                <h4 className="text-3xl font-bold text-green-600">+15%</h4>
                <p className="text-sm text-gray-600 mt-1">User growth this month</p>
              </div>
            </div>
          </div>
        </div>
      </Card>
      
      {/* Subscription Plans */}
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-lg font-semibold">Subscription Plans</h2>
          <Button size="sm">
            <Plus className="mr-2 h-4 w-4" />
            New Plan
          </Button>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="text-left py-3 px-4 font-medium text-gray-500">Plan</th>
                <th className="text-left py-3 px-4 font-medium text-gray-500">Price</th>
                <th className="text-left py-3 px-4 font-medium text-gray-500">Users</th>
                <th className="text-left py-3 px-4 font-medium text-gray-500">Revenue</th>
                <th className="text-left py-3 px-4 font-medium text-gray-500">Status</th>
                <th className="text-right py-3 px-4 font-medium text-gray-500">Actions</th>
              </tr>
            </thead>
            <tbody>
              {[
                { name: 'Enterprise', price: 1799, users: 15, revenue: 26985, active: true },
                { name: 'Professional', price: 899, users: 42, revenue: 37758, active: true },
                { name: 'Essential', price: 499, users: 86, revenue: 42914, active: true },
                { name: 'Free Tier', price: 0, users: 357, revenue: 0, active: true }
              ].map((plan) => (
                <tr key={plan.name} className="border-b border-gray-100">
                  <td className="py-3 px-4">
                    <div className="font-medium">{plan.name}</div>
                  </td>
                  <td className="py-3 px-4">
                    {plan.price > 0 ? `$${plan.price}/mo` : 'Free'}
                  </td>
                  <td className="py-3 px-4">{plan.users}</td>
                  <td className="py-3 px-4">${plan.revenue.toLocaleString()}</td>
                  <td className="py-3 px-4">
                    {plan.active ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        <span className="w-1 h-1 mr-1 rounded-full bg-green-500"></span>
                        Active
                      </span>
                    ) : (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                        <span className="w-1 h-1 mr-1 rounded-full bg-gray-500"></span>
                        Inactive
                      </span>
                    )}
                  </td>
                  <td className="py-3 px-4 text-right">
                    <div className="flex items-center justify-end space-x-2">
                      <Button size="sm" variant="ghost">
                        <Edit className="h-4 w-4" />
                      </Button>
                      {plan.name !== 'Free Tier' && (
                        <Button size="sm" variant="ghost">
                          <Trash2 className="h-4 w-4 text-red-500" />
                        </Button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>
      
      {/* Payment Processing Status */}
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-lg font-semibold">Payment Processing</h2>
          <Badge variant="success">
            <span className="flex items-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              <span className="text-sm text-gray-600">Live</span>
            </span>
          </Badge>
        </div>
        <div className="flex items-center space-x-6">
          <div className="flex items-center space-x-3">
            <CreditCard className="h-5 w-5 text-gray-500" />
            <div>
              <p className="text-sm font-medium">Stripe Connected</p>
              <p className="text-xs text-gray-500">Processing payments successfully</p>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}
